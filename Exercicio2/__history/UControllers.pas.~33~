unit UControllers;

interface

uses UModels, UConexao, FireDAC.comp.Client, Vcl.Dialogs, db, StrUtils, SysUtils;

type controllerFuncionario = class
     private
            //

     public
           function CalculaSalario( v_salario:Extended; v_CalcINSS: Boolean; v_CalcIR: Integer ): Extended;
           function CadastrarFuncionario(f_funcionario : classFuncionario):string;
           function RetornaSalario(f_funcionario : classFuncionario): Extended;
end;

implementation

{ controllerFuncionario }
function controllerFuncionario.CadastrarFuncionario(f_funcionario: classFuncionario): string;
var
   Query      : TFDQuery;
   FConexao   : classConexao;
   v_id       : Integer;
   v_field    : TIntegerField;
   dependente : classDependente;
begin


     FConexao := classConexao.Create();
     Fconexao.AbreConexao;

     Query := FConexao.Comando;

     v_field           := TIntegerField.Create(nil);
     v_field.fieldName := 'ID';
     v_field.Index     := Query.FieldCount;
     v_field.DataSet   := Query;

     v_id  := 0;
     try
        try
          Query.SQL.Clear;
          Query.SQL.Add('INSERT INTO FUNCIONARIO (ID,NOME,SALARIO)');
          Query.SQL.Add('VALUES (GEN_ID(GEN_FUNCIONARIO,1),:NOME,:SALARIO)');
          Query.SQL.Add('RETURNING ID');
          Query.Prepare;
          Query.ParamByName('NOME').AsString    := f_funcionario.Nome;
          Query.ParamByName('SALARIO').AsBCD    := f_funcionario.Salario;
          Query.Open;

          f_funcionario.ID := Query.FieldByName('ID').AsInteger;

          Query.SQL.Clear;
          Query.SQL.Add('INSERT INTO DEPENDENTE (ID,IDFUNCIONARIO,NOME,ISCALCULARIR,ISCALCULARINSS)');
          Query.SQL.Add('VALUES (GEN_ID(GEN_DEPENDENTE,1),:IDFUNC,:NOME,:ISCALCULARIR,:ISCALCULARINSS)');
          Query.Prepare;

          for dependente in f_funcionario.ListaDependentes do
              begin
                   Query.Params.ClearValues;
                   Query.ParamByName('IDFUNC').AsInteger          := f_funcionario.ID;
                   Query.ParamByName('NOME').AsString             := dependente.Nome;
                   Query.ParamByName('ISCALCULARIR').AsSmallInt   := StrToInt(ifthen(dependente.IsCalcularIR,'1','0'));
                   Query.ParamByName('ISCALCULARINSS').AsSmallInt := StrToInt(ifthen(dependente.IsCalcularINSS,'1','0'));
                   Query.ExecSQL;
              end;

          Result := 'Funcionário cadastrado com sucesso.' + sLineBreak + 'ID: ' + IntToStr(f_funcionario.ID);
        except
              on e : Exception do
                 Result := e.Message;
        end;
     finally
            Query.Free;
            FConexao.Free;
     end;
end;

function controllerFuncionario.CalculaSalario( v_salario:Extended; v_CalcINSS: Boolean;
 v_CalcIR: Integer ): Extended;
var
  v_DescINSS,
  v_DescIR   : Extended;

begin
     v_DescINSS := 8; //%
     v_DescIR   := 100;//R$

     if v_CalcINSS then
        Result := Result - ((v_DescINSS / 100) * v_salario );

     if v_CalcIR > 0 then
        Result := Result -  ((15 / 100) * ( v_salario - (v_DescIR * v_CalcIR)));

end;

function controllerFuncionario.RetornaSalario(
  f_funcionario: classFuncionario): Extended;
var
  v_salario ,
  v_DescINSS,
  v_DescIR   : Extended;
  v_CalcINSS : Boolean;
  v_CalcIR   : Integer;
  dependente : classDependente;
begin
     v_CalcINSS := False;
     v_CalcIR   := 0;
     v_salario  := 0;
     v_DescINSS := 8; //%
     v_DescIR   := 100;//R$

     v_salario := f_funcionario.Salario;

     for dependente in f_funcionario.ListaDependentes do
         begin
              if dependente.IsCalcularINSS then
                 v_CalcINSS := True;

              if dependente.IsCalcularIR then
                 Inc(v_CalcIR);
         end;

     if v_CalcINSS then
        v_salario := v_salario - ((v_DescINSS / 100) * f_funcionario.Salario);

     if v_CalcIR > 0 then
        v_salario := v_salario -  ((15 / 100) * ( f_funcionario.Salario - (v_DescIR * v_CalcIR)));

     Result := v_salario;
end;

end.
